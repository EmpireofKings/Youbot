# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slaw_youbot_arm_navigation_srvs/MoveArmIKRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MoveArmIKRequest(genpy.Message):
  _md5sum = "117f06af0876addddec5d12b6674fb52"
  _type = "slaw_youbot_arm_navigation_srvs/MoveArmIKRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point position
float32 angle
bool velocity_controlled
string side
float32 endlink_angle
bool horizontal
bool blocking
float32 endeffector_offset
float32 max_speed

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['position','angle','velocity_controlled','side','endlink_angle','horizontal','blocking','endeffector_offset','max_speed']
  _slot_types = ['geometry_msgs/Point','float32','bool','string','float32','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,angle,velocity_controlled,side,endlink_angle,horizontal,blocking,endeffector_offset,max_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmIKRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.angle is None:
        self.angle = 0.
      if self.velocity_controlled is None:
        self.velocity_controlled = False
      if self.side is None:
        self.side = ''
      if self.endlink_angle is None:
        self.endlink_angle = 0.
      if self.horizontal is None:
        self.horizontal = False
      if self.blocking is None:
        self.blocking = False
      if self.endeffector_offset is None:
        self.endeffector_offset = 0.
      if self.max_speed is None:
        self.max_speed = 0.
    else:
      self.position = geometry_msgs.msg.Point()
      self.angle = 0.
      self.velocity_controlled = False
      self.side = ''
      self.endlink_angle = 0.
      self.horizontal = False
      self.blocking = False
      self.endeffector_offset = 0.
      self.max_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3dfB.pack(_x.position.x, _x.position.y, _x.position.z, _x.angle, _x.velocity_controlled))
      _x = self.side
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f2B2f.pack(_x.endlink_angle, _x.horizontal, _x.blocking, _x.endeffector_offset, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.position.x, _x.position.y, _x.position.z, _x.angle, _x.velocity_controlled,) = _struct_3dfB.unpack(str[start:end])
      self.velocity_controlled = bool(self.velocity_controlled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.side = str[start:end].decode('utf-8')
      else:
        self.side = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.endlink_angle, _x.horizontal, _x.blocking, _x.endeffector_offset, _x.max_speed,) = _struct_f2B2f.unpack(str[start:end])
      self.horizontal = bool(self.horizontal)
      self.blocking = bool(self.blocking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3dfB.pack(_x.position.x, _x.position.y, _x.position.z, _x.angle, _x.velocity_controlled))
      _x = self.side
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f2B2f.pack(_x.endlink_angle, _x.horizontal, _x.blocking, _x.endeffector_offset, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.position.x, _x.position.y, _x.position.z, _x.angle, _x.velocity_controlled,) = _struct_3dfB.unpack(str[start:end])
      self.velocity_controlled = bool(self.velocity_controlled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.side = str[start:end].decode('utf-8')
      else:
        self.side = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.endlink_angle, _x.horizontal, _x.blocking, _x.endeffector_offset, _x.max_speed,) = _struct_f2B2f.unpack(str[start:end])
      self.horizontal = bool(self.horizontal)
      self.blocking = bool(self.blocking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dfB = struct.Struct("<3dfB")
_struct_f2B2f = struct.Struct("<f2B2f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slaw_youbot_arm_navigation_srvs/MoveArmIKResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveArmIKResponse(genpy.Message):
  _md5sum = "a4d50a34d34f18de48e2436ff1472594"
  _type = "slaw_youbot_arm_navigation_srvs/MoveArmIKResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
string reason
"""
  __slots__ = ['success','reason']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,reason

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmIKResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.reason is None:
        self.reason = ''
    else:
      self.success = False
      self.reason = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class MoveArmIK(object):
  _type          = 'slaw_youbot_arm_navigation_srvs/MoveArmIK'
  _md5sum = '422de537244f37b21b06e40c0f081e4a'
  _request_class  = MoveArmIKRequest
  _response_class = MoveArmIKResponse
