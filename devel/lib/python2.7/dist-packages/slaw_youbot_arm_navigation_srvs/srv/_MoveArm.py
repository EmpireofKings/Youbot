# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slaw_youbot_arm_navigation_srvs/MoveArmRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import slaw_youbot_arm_navigation_msgs.msg

class MoveArmRequest(genpy.Message):
  _md5sum = "2199525abf3db44c8bf0336a39789c90"
  _type = "slaw_youbot_arm_navigation_srvs/MoveArmRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """slaw_youbot_arm_navigation_msgs/ArmConfiguration[] configurations
bool blocking
bool velocity_controlled
float32 max_speed

================================================================================
MSG: slaw_youbot_arm_navigation_msgs/ArmConfiguration
float32 arm_joint_1
float32 arm_joint_2
float32 arm_joint_3
float32 arm_joint_4
float32 arm_joint_5"""
  __slots__ = ['configurations','blocking','velocity_controlled','max_speed']
  _slot_types = ['slaw_youbot_arm_navigation_msgs/ArmConfiguration[]','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       configurations,blocking,velocity_controlled,max_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.configurations is None:
        self.configurations = []
      if self.blocking is None:
        self.blocking = False
      if self.velocity_controlled is None:
        self.velocity_controlled = False
      if self.max_speed is None:
        self.max_speed = 0.
    else:
      self.configurations = []
      self.blocking = False
      self.velocity_controlled = False
      self.max_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.configurations)
      buff.write(_struct_I.pack(length))
      for val1 in self.configurations:
        _x = val1
        buff.write(_struct_5f.pack(_x.arm_joint_1, _x.arm_joint_2, _x.arm_joint_3, _x.arm_joint_4, _x.arm_joint_5))
      _x = self
      buff.write(_struct_2Bf.pack(_x.blocking, _x.velocity_controlled, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.configurations is None:
        self.configurations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.configurations = []
      for i in range(0, length):
        val1 = slaw_youbot_arm_navigation_msgs.msg.ArmConfiguration()
        _x = val1
        start = end
        end += 20
        (_x.arm_joint_1, _x.arm_joint_2, _x.arm_joint_3, _x.arm_joint_4, _x.arm_joint_5,) = _struct_5f.unpack(str[start:end])
        self.configurations.append(val1)
      _x = self
      start = end
      end += 6
      (_x.blocking, _x.velocity_controlled, _x.max_speed,) = _struct_2Bf.unpack(str[start:end])
      self.blocking = bool(self.blocking)
      self.velocity_controlled = bool(self.velocity_controlled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.configurations)
      buff.write(_struct_I.pack(length))
      for val1 in self.configurations:
        _x = val1
        buff.write(_struct_5f.pack(_x.arm_joint_1, _x.arm_joint_2, _x.arm_joint_3, _x.arm_joint_4, _x.arm_joint_5))
      _x = self
      buff.write(_struct_2Bf.pack(_x.blocking, _x.velocity_controlled, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.configurations is None:
        self.configurations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.configurations = []
      for i in range(0, length):
        val1 = slaw_youbot_arm_navigation_msgs.msg.ArmConfiguration()
        _x = val1
        start = end
        end += 20
        (_x.arm_joint_1, _x.arm_joint_2, _x.arm_joint_3, _x.arm_joint_4, _x.arm_joint_5,) = _struct_5f.unpack(str[start:end])
        self.configurations.append(val1)
      _x = self
      start = end
      end += 6
      (_x.blocking, _x.velocity_controlled, _x.max_speed,) = _struct_2Bf.unpack(str[start:end])
      self.blocking = bool(self.blocking)
      self.velocity_controlled = bool(self.velocity_controlled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Bf = struct.Struct("<2Bf")
_struct_5f = struct.Struct("<5f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slaw_youbot_arm_navigation_srvs/MoveArmResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveArmResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "slaw_youbot_arm_navigation_srvs/MoveArmResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class MoveArm(object):
  _type          = 'slaw_youbot_arm_navigation_srvs/MoveArm'
  _md5sum = '9f106f1e1533bc6bfe2e5855c5cd2307'
  _request_class  = MoveArmRequest
  _response_class = MoveArmResponse
