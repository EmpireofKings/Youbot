# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slaw_youbot_arm_navigation_actions/MoveArmLinearGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import slaw_youbot_arm_navigation_msgs.msg

class MoveArmLinearGoal(genpy.Message):
  _md5sum = "8291b0dd133b6af7ea6c884dbf61b421"
  _type = "slaw_youbot_arm_navigation_actions/MoveArmLinearGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
slaw_youbot_arm_navigation_msgs/EndeffectorPosition[] points
float32 max_speed
string side
float32 endlink_angle
bool horizontal
float32 endeffector_offset

================================================================================
MSG: slaw_youbot_arm_navigation_msgs/EndeffectorPosition
geometry_msgs/Point position
float32 angle
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['points','max_speed','side','endlink_angle','horizontal','endeffector_offset']
  _slot_types = ['slaw_youbot_arm_navigation_msgs/EndeffectorPosition[]','float32','string','float32','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       points,max_speed,side,endlink_angle,horizontal,endeffector_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmLinearGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.points is None:
        self.points = []
      if self.max_speed is None:
        self.max_speed = 0.
      if self.side is None:
        self.side = ''
      if self.endlink_angle is None:
        self.endlink_angle = 0.
      if self.horizontal is None:
        self.horizontal = False
      if self.endeffector_offset is None:
        self.endeffector_offset = 0.
    else:
      self.points = []
      self.max_speed = 0.
      self.side = ''
      self.endlink_angle = 0.
      self.horizontal = False
      self.endeffector_offset = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.angle))
      buff.write(_struct_f.pack(self.max_speed))
      _x = self.side
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fBf.pack(_x.endlink_angle, _x.horizontal, _x.endeffector_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = slaw_youbot_arm_navigation_msgs.msg.EndeffectorPosition()
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.angle,) = _struct_f.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (self.max_speed,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.side = str[start:end].decode('utf-8')
      else:
        self.side = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.endlink_angle, _x.horizontal, _x.endeffector_offset,) = _struct_fBf.unpack(str[start:end])
      self.horizontal = bool(self.horizontal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v3 = val1.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.angle))
      buff.write(_struct_f.pack(self.max_speed))
      _x = self.side
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fBf.pack(_x.endlink_angle, _x.horizontal, _x.endeffector_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = slaw_youbot_arm_navigation_msgs.msg.EndeffectorPosition()
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.angle,) = _struct_f.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (self.max_speed,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.side = str[start:end].decode('utf-8')
      else:
        self.side = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.endlink_angle, _x.horizontal, _x.endeffector_offset,) = _struct_fBf.unpack(str[start:end])
      self.horizontal = bool(self.horizontal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f = struct.Struct("<f")
_struct_fBf = struct.Struct("<fBf")
_struct_3d = struct.Struct("<3d")
