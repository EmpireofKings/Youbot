// Generated by gencpp from file slaw_youbot_arm_navigation_srvs/SimpleIkSolverRequest.msg
// DO NOT EDIT!


#ifndef SLAW_YOUBOT_ARM_NAVIGATION_SRVS_MESSAGE_SIMPLEIKSOLVERREQUEST_H
#define SLAW_YOUBOT_ARM_NAVIGATION_SRVS_MESSAGE_SIMPLEIKSOLVERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace slaw_youbot_arm_navigation_srvs
{
template <class ContainerAllocator>
struct SimpleIkSolverRequest_
{
  typedef SimpleIkSolverRequest_<ContainerAllocator> Type;

  SimpleIkSolverRequest_()
    : point()
    , endeffector_offset(0.0)
    , endlink_angle(0.0)
    , position()
    , horizontal(false)  {
    }
  SimpleIkSolverRequest_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , endeffector_offset(0.0)
    , endlink_angle(0.0)
    , position(_alloc)
    , horizontal(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef float _endeffector_offset_type;
  _endeffector_offset_type endeffector_offset;

   typedef float _endlink_angle_type;
  _endlink_angle_type endlink_angle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_type;
  _position_type position;

   typedef uint8_t _horizontal_type;
  _horizontal_type horizontal;




  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleIkSolverRequest_

typedef ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<std::allocator<void> > SimpleIkSolverRequest;

typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest > SimpleIkSolverRequestPtr;
typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest const> SimpleIkSolverRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slaw_youbot_arm_navigation_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'slaw_youbot_arm_navigation_msgs': ['/home/ruud/youBot/src/slaw_youbot_arm_navigation/slaw_youbot_arm_navigation_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "137e079656b8e099f80dde8a83e1c0c9";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x137e079656b8e099ULL;
  static const uint64_t static_value2 = 0xf80dde8a83e1c0c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slaw_youbot_arm_navigation_srvs/SimpleIkSolverRequest";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped point\n\
float32 endeffector_offset\n\
float32 endlink_angle\n\
string position\n\
bool horizontal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.endeffector_offset);
      stream.next(m.endlink_angle);
      stream.next(m.position);
      stream.next(m.horizontal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleIkSolverRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slaw_youbot_arm_navigation_srvs::SimpleIkSolverRequest_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "endeffector_offset: ";
    Printer<float>::stream(s, indent + "  ", v.endeffector_offset);
    s << indent << "endlink_angle: ";
    Printer<float>::stream(s, indent + "  ", v.endlink_angle);
    s << indent << "position: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position);
    s << indent << "horizontal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horizontal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAW_YOUBOT_ARM_NAVIGATION_SRVS_MESSAGE_SIMPLEIKSOLVERREQUEST_H
