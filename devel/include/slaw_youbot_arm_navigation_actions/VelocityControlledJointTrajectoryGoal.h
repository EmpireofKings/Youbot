// Generated by gencpp from file slaw_youbot_arm_navigation_actions/VelocityControlledJointTrajectoryGoal.msg
// DO NOT EDIT!


#ifndef SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_VELOCITYCONTROLLEDJOINTTRAJECTORYGOAL_H
#define SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_VELOCITYCONTROLLEDJOINTTRAJECTORYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <slaw_youbot_arm_navigation_msgs/ArmConfiguration.h>

namespace slaw_youbot_arm_navigation_actions
{
template <class ContainerAllocator>
struct VelocityControlledJointTrajectoryGoal_
{
  typedef VelocityControlledJointTrajectoryGoal_<ContainerAllocator> Type;

  VelocityControlledJointTrajectoryGoal_()
    : configurations()
    , max_speed(0.0)  {
    }
  VelocityControlledJointTrajectoryGoal_(const ContainerAllocator& _alloc)
    : configurations(_alloc)
    , max_speed(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::slaw_youbot_arm_navigation_msgs::ArmConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::slaw_youbot_arm_navigation_msgs::ArmConfiguration_<ContainerAllocator> >::other >  _configurations_type;
  _configurations_type configurations;

   typedef float _max_speed_type;
  _max_speed_type max_speed;




  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityControlledJointTrajectoryGoal_

typedef ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<std::allocator<void> > VelocityControlledJointTrajectoryGoal;

typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal > VelocityControlledJointTrajectoryGoalPtr;
typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal const> VelocityControlledJointTrajectoryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slaw_youbot_arm_navigation_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'slaw_youbot_arm_navigation_actions': ['/home/ruud/youBot/devel/share/slaw_youbot_arm_navigation_actions/msg'], 'slaw_youbot_arm_navigation_msgs': ['/home/ruud/youBot/src/slaw_youbot_arm_navigation/slaw_youbot_arm_navigation_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "703dceb116ce4d94e1e5ecb7f9888a37";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x703dceb116ce4d94ULL;
  static const uint64_t static_value2 = 0xe1e5ecb7f9888a37ULL;
};

template<class ContainerAllocator>
struct DataType< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slaw_youbot_arm_navigation_actions/VelocityControlledJointTrajectoryGoal";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
slaw_youbot_arm_navigation_msgs/ArmConfiguration[] configurations\n\
float32 max_speed\n\
\n\
================================================================================\n\
MSG: slaw_youbot_arm_navigation_msgs/ArmConfiguration\n\
float32 arm_joint_1\n\
float32 arm_joint_2\n\
float32 arm_joint_3\n\
float32 arm_joint_4\n\
float32 arm_joint_5\n\
";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.configurations);
      stream.next(m.max_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityControlledJointTrajectoryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slaw_youbot_arm_navigation_actions::VelocityControlledJointTrajectoryGoal_<ContainerAllocator>& v)
  {
    s << indent << "configurations[]" << std::endl;
    for (size_t i = 0; i < v.configurations.size(); ++i)
    {
      s << indent << "  configurations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::slaw_youbot_arm_navigation_msgs::ArmConfiguration_<ContainerAllocator> >::stream(s, indent + "    ", v.configurations[i]);
    }
    s << indent << "max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.max_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_VELOCITYCONTROLLEDJOINTTRAJECTORYGOAL_H
