// Generated by gencpp from file slaw_youbot_arm_navigation_actions/MoveArmLinearGoal.msg
// DO NOT EDIT!


#ifndef SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_MOVEARMLINEARGOAL_H
#define SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_MOVEARMLINEARGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <slaw_youbot_arm_navigation_msgs/EndeffectorPosition.h>

namespace slaw_youbot_arm_navigation_actions
{
template <class ContainerAllocator>
struct MoveArmLinearGoal_
{
  typedef MoveArmLinearGoal_<ContainerAllocator> Type;

  MoveArmLinearGoal_()
    : points()
    , max_speed(0.0)
    , side()
    , endlink_angle(0.0)
    , horizontal(false)
    , endeffector_offset(0.0)  {
    }
  MoveArmLinearGoal_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , max_speed(0.0)
    , side(_alloc)
    , endlink_angle(0.0)
    , horizontal(false)
    , endeffector_offset(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::slaw_youbot_arm_navigation_msgs::EndeffectorPosition_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::slaw_youbot_arm_navigation_msgs::EndeffectorPosition_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef float _max_speed_type;
  _max_speed_type max_speed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _side_type;
  _side_type side;

   typedef float _endlink_angle_type;
  _endlink_angle_type endlink_angle;

   typedef uint8_t _horizontal_type;
  _horizontal_type horizontal;

   typedef float _endeffector_offset_type;
  _endeffector_offset_type endeffector_offset;




  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveArmLinearGoal_

typedef ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<std::allocator<void> > MoveArmLinearGoal;

typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal > MoveArmLinearGoalPtr;
typedef boost::shared_ptr< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal const> MoveArmLinearGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slaw_youbot_arm_navigation_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'slaw_youbot_arm_navigation_actions': ['/home/ruud/youBot/devel/share/slaw_youbot_arm_navigation_actions/msg'], 'slaw_youbot_arm_navigation_msgs': ['/home/ruud/youBot/src/slaw_youbot_arm_navigation/slaw_youbot_arm_navigation_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8291b0dd133b6af7ea6c884dbf61b421";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8291b0dd133b6af7ULL;
  static const uint64_t static_value2 = 0xea6c884dbf61b421ULL;
};

template<class ContainerAllocator>
struct DataType< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slaw_youbot_arm_navigation_actions/MoveArmLinearGoal";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
slaw_youbot_arm_navigation_msgs/EndeffectorPosition[] points\n\
float32 max_speed\n\
string side\n\
float32 endlink_angle\n\
bool horizontal\n\
float32 endeffector_offset\n\
\n\
================================================================================\n\
MSG: slaw_youbot_arm_navigation_msgs/EndeffectorPosition\n\
geometry_msgs/Point position\n\
float32 angle\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.max_speed);
      stream.next(m.side);
      stream.next(m.endlink_angle);
      stream.next(m.horizontal);
      stream.next(m.endeffector_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveArmLinearGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slaw_youbot_arm_navigation_actions::MoveArmLinearGoal_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::slaw_youbot_arm_navigation_msgs::EndeffectorPosition_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.max_speed);
    s << indent << "side: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.side);
    s << indent << "endlink_angle: ";
    Printer<float>::stream(s, indent + "  ", v.endlink_angle);
    s << indent << "horizontal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horizontal);
    s << indent << "endeffector_offset: ";
    Printer<float>::stream(s, indent + "  ", v.endeffector_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAW_YOUBOT_ARM_NAVIGATION_ACTIONS_MESSAGE_MOVEARMLINEARGOAL_H
